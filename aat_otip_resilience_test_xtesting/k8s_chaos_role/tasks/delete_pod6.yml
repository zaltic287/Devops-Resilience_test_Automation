---
# delete_pods.yml
- name: Find namespace for current filter
  shell: >
    kubectl get pods --all-namespaces --no-headers |
    grep {{ current_filter }} | awk '{print $1}' | head -n 1
  register: namespace_result
  changed_when: false
  failed_when: namespace_result.stdout == ""


- name: Define the test number based on the current_filter
  set_fact:
    namespace: "{{ namespace_result.stdout | trim }}"
    resi_test_number: >-
      {% if current_filter == 'smf-pgw-session' %}
        23
      {% elif current_filter == 'sm-udp-forwarder' %}
        36
      {% elif current_filter == 'sm-ip-allocator' %}
        37
      {% elif current_filter == 'sm-controller' %}
        41
      {% elif current_filter == 'kvdb' %}
        42
      {% elif current_filter == 'sm-sgw-session' %}
        33
      {% elif current_filter == 'mm-controller' %}
        26
      {% elif current_filter == 'mm-sctp' %}
        30
      {% elif current_filter == 'mm-forwarder' %}
        32
      {% else %}
        00
      {% endif %}

- name: set dynamically the the resilience number
  set_fact:
    remote_artifact_path: "/tmp/RESI-TEST-{{resi_test_number | trim}}-{{current_filter}}.md"


- name: Capture pod state before deletion
  shell: |
    echo "# Pod's state before deletion for filter: {{ current_filter }}" >> {{ remote_artifact_path }}
    echo "" >> {{ remote_artifact_path }}
    echo '```' >> {{ remote_artifact_path }}
    kubectl get pods -n {{ namespace }} -o wide | grep {{ current_filter }} >> {{ remote_artifact_path }}
    echo '```' >> {{ remote_artifact_path }}

- name: List matching pods
  shell: "kubectl get pod -n {{ namespace }} | grep {{ current_filter }} | awk '{print $1}'"
  register: pod_list
  changed_when: false

- name: Fail if no pod found
  fail:
    msg: "No pod found matching '{{ current_filter }}' in namespace '{{ namespace }}'."
  when: pod_list.stdout == ""

- name: Choose random pod to delete
  set_fact:
    pod_name: "{{ pod_list.stdout.split() | random }}"

- name: Logs pod about to be deleted
  shell: |
    echo "# Pod selected matching {{ current_filter }}" >> {{ remote_artifact_path }}
    echo "" >> {{ remote_artifact_path }}
    echo "Pod to be deleted : {{ pod_name }}" >> {{ remote_artifact_path }}


# block executed for mm-mobility before choas
- name: Get data from AMF and copy them to remote artifact file befor chaos
  block:
    - name: SSH connection to AMF and Get CPU load
      shell: |
        sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no \
          pcc-admin@{{ amf_ip_address | trim }} \
          'gsh get_eq_cpu_load'
      register: cpu_load
      changed_when: false
      #failed_when: false
      delegate_to: localhost

    # fetch data from amf
    - name: Copy data from amf to remote artifact file
      shell: |
        echo "# CPU Laod from AMF before Test " >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
        echo "{{ cpu_load.stdout }}" >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
  
    - name: SSH connection to AMF and Get eci list
      shell: |
        sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no \
          pcc-admin@{{ amf_ip_address | trim }} \
          'eci list'
      register: eci_list
      changed_when: false
      #failed_when: false
      delegate_to: localhost

    - name: Copy data from amf to remote artifact file
      shell: |
        echo "# ECI list from AMF before test " >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
        echo "{{ eci_list.stdout }}" >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
  when: current_filter == "mm-mobility"

- name: Delete the pod
  shell: "kubectl delete pod {{ pod_name }} -n {{ namespace }}"
  register: delete_result

- name: Log post-deletion state
  shell: |
    echo "# State after deletion" >> {{ remote_artifact_path }}
    echo "" >> {{ remote_artifact_path }}
    echo '```' >> {{ remote_artifact_path }}
    kubectl get pods -n {{ namespace }} -o wide | grep {{ current_filter }} >> {{ remote_artifact_path }}
    echo '```' >> {{ remote_artifact_path }}

- name: Check if new pod is created
  shell: |
    kubectl get pods -n {{ namespace }} --sort-by=.metadata.creationTimestamp \
      | grep {{ current_filter }} | tail -n 1 | awk '{print $1}'
  register: latest_pod_name
  changed_when: false

- name: Check pod status
  shell: |
    kubectl get pod -n {{ namespace }} {{ latest_pod_name.stdout }} -o jsonpath='{.status.phase}'
  register: latest_pod_status
  changed_when: false

- name: Log for new pod info
  shell: |
    echo "# New pod status" >> {{ remote_artifact_path }}
    echo "" >> {{ remote_artifact_path }}
    echo '```' >> {{ remote_artifact_path }}
    echo "Pod name: {{ latest_pod_name.stdout }}" >> {{ remote_artifact_path }}
    echo "" >> {{ remote_artifact_path }}
    echo "Pod Status: {{ latest_pod_status.stdout }}" >> {{ remote_artifact_path }}
    echo '```' >> {{ remote_artifact_path }}
  when: latest_pod_name.stdout != ""


# Set the Right AMF 
- name: Define the right AMF ip address
  set_fact:
    amf_ip_address: >-
      {% if cluster == 'eccd6' %}
        {{amf_site2}}
      {% elif cluster == 'eccd5' %}
        {{amf_site1}}
      {% else %}
        00
      {% endif %}


# Set the Right SMF
- name: Define the right SMF ip address
  set_fact:
    smf_ip_address: >-
      {% if cluster == 'eccd6' %}
        {{smf_site2}}
      {% elif cluster == 'eccd5' %}
        {{smf_site1}}
      {% else %}
        00
      {% endif %}

# Connection to amf and copy data to remote artifact
- name: Get data From AMF and Copy them to remote artifact
  block:
    - name: SSH connection to AMF and Get CPU Load
      shell: |
        sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no \
          pcc-admin@{{ amf_ip_address | trim }} \
          'gsh get_eq_cpu_load'
      register: cpu_load
      changed_when: false
      failed_when: false
      delegate_to: localhost

    # fetch data from amf
    - name: Copy data from amf to remote artifact file
      shell: |
        echo "# CPU Laod from AMF " >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
        echo "{{ cpu_load.stdout }}" >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
  when: current_filter == "mm-controller"

# block executed for mm-mobility after test
- name: Get data from AMF and copy them to remote artifact
  block:
    - name: SSH connection to AMF and Get CPU load
      shell: |
        sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no \
          pcc-admin@{{ amf_ip_address | trim }} \
          'gsh get_eq_cpu_load'
      register: cpu_load
      changed_when: false
      #failed_when: false
      delegate_to: localhost

    # fetch data from amf
    - name: Copy data from amf to remote artifact file
      shell: |
        echo "# CPU Laod from AMF after test " >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
        echo "{{ cpu_load.stdout }}" >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
  
    - name: SSH connection to AMF and Get eci list
      shell: |
        sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no \
          pcc-admin@{{ amf_ip_address | trim }} \
          'eci list'
      register: eci_list
      changed_when: false
      failed_when: false
      delegate_to: localhost

    - name: Copy data from amf to remote artifact file
      shell: |
        echo "# ECI list from AMF after test " >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
        echo "{{ eci_list.stdout }}" >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
  when: current_filter == "mm-mobility"


# Connection to amf and retrieve alarms
- name: Connection to Amf and get alarms
  block:
    - name: Get alarm from AMF
      shell: |
        sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no \
          pcc-admin@{{ amf_ip_address | trim }} \
          'gsh list_alarms'
      register: alarms
      changed_when: false
      #failed_when: alarms.rc != 0
      failed_when: false
      delegate_to: localhost


    # copy alarms logs from AMF to remote artifact
    - name: Copy logs from kvdb to remote artifact file
      shell: |
        echo "# Alarms from Amf" >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
        echo "{{ alarms.stdout }}" >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
  when: current_filter == "mm-sctp"

# this block of task is executed to get logs from kvdb operator
- name: Get data from Kvdb Operator and copy them to remote artifact
  block:
    - name: List matching pods for kvdb operator
      shell: "kubectl get pod -n {{ namespace }} | grep kvdb-rd-operator | awk '{print $1}'"
      register: pod_list_kvdb_operator
      changed_when: false

    - name: Get logs from kvdb operator
      shell: kubectl logs {{ pod_list_kvdb_operator.stdout }} -n {{ namespace }} | tail -n 10
      register: kvdb_operator_logs
      changed_when: false

    # Copy data from kvdb operator to remote artifact file
    - name: Copy logs from kvdb to remote artifact file
      shell: |
        echo "# Logs From Kvdb Operator " >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
        echo "{{ kvdb_operator_logs.stdout }}" >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}

# Connection to smf and retrieve alarms
    - name: Get alarm from SMF
      shell: |
        sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no \
          pcc-admin@{{ smf_ip_address | trim }} \
          'show alarm'
      register: alarmsmf
      changed_when: false
      #failed_when: alarmsmf.rc != 0
      failed_when: false
      delegate_to: localhost

    # Copy data from kvdb operator to remote artifact file
    - name: Copy logs from kvdb to remote artifact file
      shell: |
        echo "# Alarms generated from smf " >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
        echo "{{ alarmsmf.stdout }}" >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}

  when: current_filter == "kvdb"


# Connection to smf and get trafic info
- name: Connection to Smf and get trafic infos
  block:
    - name: Get trafic infos from SMF
      shell: |
        sshpass -p '{{ ssh_password }}' ssh -o StrictHostKeyChecking=no \
          pcc-admin@{{ smf_ip_address | trim }} \
            'epg node status'
      register: trafic
      changed_when: false
      failed_when: false
      delegate_to: localhost

    # copy  trafic infos from SMF to remote artifact
    - name: Copy Trafic info from smf to remote artifact file
      shell: |
        echo "# Trafic Infos from Smf" >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
        echo "{{ trafic.stdout }}" >> {{ remote_artifact_path }}
        echo '```' >> {{ remote_artifact_path }}
  when: current_filter == "smf-pgw-session"


